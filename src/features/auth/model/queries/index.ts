import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { loginRequest } from "../api";
import { toast } from "sonner";
import { User } from "../types";
// –ö–ª—é—á –¥–ª—è react-query –∫—ç—à–∞
const USER_QUERY_KEY = ["authUser"];
// üîπ –•—É–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export function useLogin() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ username, password }: { username: string; password: string }) =>
      loginRequest(username, password),
    onSuccess: (user) => {
      queryClient.setQueryData(USER_QUERY_KEY, user);
    },

    onError: (error: any) => {
      console.error("‚ùå Login error:", error);
      toast.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É", { description: error?.response?.data?.detail || "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ." });
    },
  });
}
// üîπ –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function useAuthUser() {
  return useQuery<User | null>({
    queryKey: USER_QUERY_KEY,
    queryFn: async () => {
      // –µ—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º –∏–∑ localStorage
      const userStr = localStorage.getItem("user");
      if (!userStr) return null;
      return JSON.parse(userStr) as User;
    },
    staleTime: Infinity,
    initialData: () => {
      const userStr = localStorage.getItem("user");
      return userStr ? (JSON.parse(userStr) as User) : null;
    },
  });
}
